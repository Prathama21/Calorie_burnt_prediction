# -*- coding: utf-8 -*-
"""Calories Burnt Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CWhMuu8EF6RlDOp1yB94O-Gasf93Wa-B

Importing the dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

"""Data collection and processing"""

# loading the data from csv file to a pandas dataframe
calories = pd.read_csv('/content/calories.csv')

# print the 1st 5 rows of the dataframe
calories.head()

exercise = pd.read_csv('/content/exercise.csv')
exercise.head()

"""Combining the 2 dataframes"""

calories_data = pd.concat([exercise,calories['Calories']], axis=1) #adding data column wise

calories_data.head()

# checking the no.of rows and columns
calories_data.shape

# getting some info. about the data
calories_data.info()

# checking for missing values
calories_data.isnull().sum()

"""Data analysis"""

# get some statistical measures about the data ( mean values of some paticular data,etc,etc)
calories_data.describe()

"""Data visualization"""

sns.set()

# ploting the gender column in count plot
sns.countplot(calories_data['Gender'])

# finding the distribution of "Age" column
sns.distplot(calories_data['Age'])

# finding the distribution of "Height" column
sns.distplot(calories_data['Height'])

# finding the distribution of "Weight" column
sns.distplot(calories_data['Weight'])

# finding the distribution of "Duration" column
sns.distplot(calories_data['Duration'])

"""Finding the correlation in the dataset

1] Positive correlation (mane jokhun duration barbe so calories burnt o barbe, .mane duto eke opor er sthe related = directly proportional)

2] Negative correlation (mane jokhun duration kombe so tokhun calories burnt o kombe becz otao related)
"""

correlation = calories_data.corr()

# constructing a heatmap to understand the correlation
plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':8}, cmap='Blues')

"""Converting the text data to numerical values (gender ta graph e plot hye ni & jokhun statistical data to bar kora hyeche gender er mean,etc,etc beroyi ni becz ota text value tai jonne ota k numerical value te convert korte hbe)"""

calories_data.replace({"Gender":{'male':0, 'female':1}}, inplace=True) #a permanent change
calories_data.head()

"""Separating features and targets"""

X = calories_data.drop(columns=['User_ID','Calories'], axis=1)
Y = calories_data['Calories']

print(X)

print(Y)

"""Splitting the data into training and test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.2, random_state=2) #split korar jonne
print(X.shape, X_train.shape, X_test.shape)

"""Model training (Linear Regressor)"""

# loading the model
regressor = LinearRegression()

# training the model with X_train
regressor.fit(X_train, Y_train)

"""Evaluation (based on training data)

Prediction on training data
"""

training_data_prediction = regressor.predict(X_train)
print(training_data_prediction)

# R squared value
r2_train = metrics.r2_score(Y_train, training_data_prediction)
print('R squared value : ', r2_train)

"""Prediction on test data"""

test_data_prediction = regressor.predict(X_test)
print(test_data_prediction)

# R squared value
r2_test = metrics.r2_score(Y_test, test_data_prediction)
print('R squared value : ', r2_test)

"""Compare Y_test and test_data_prediction

(mae) Mean absolute error (real value - value predicted = mae)
"""

mae = metrics.mean_absolute_error(Y_test, test_data_prediction)
print("Mean Absolute Error = ", mae)

"""Building apredictive system"""

input_data = (1,20,166.0,60.0,14.0,94.0,40.3)

# changing input_data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the array
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = regressor.predict(input_data_reshaped)
print('The Calories burnt is : ', prediction[0])

